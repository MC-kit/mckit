# -*- coding: utf-8 -*-

import numpy as np

from mckit.fmesh import Box

box = Box([-1, -1, -1], [2, 0, 0], [0, 2, 0], [0, 0, 2])

data = {
    'Plane': [
        ([1, 0, 0], 0, 0),
        ([1, 0, 0], 1.001, 1),
        ([1, 0, 0], -1.001, -1),
        ([1, 0, 0], 0.999, 0),
        ([1, 0, 0], -0.999, 0),
        ([0, 1, 0], 0, 0),
        ([0, 1, 0], 1.001, 1),
        ([0, 1, 0], -1.001, -1),
        ([0, 1, 0], 0.999, 0),
        ([0, 1, 0], -0.999, 0),
        ([0, 0, 1], 0, 0),
        ([0, 0, 1], 1.001, 1),
        ([0, 0, 1], -1.001, -1),
        ([0, 0, 1], 0.999, 0),
        ([0, 0, 1], -0.999, 0),
        ([1, 1, 1], -2.999, 0),
        ([1, 1, 1], -3.001, -1),
        ([1, 1, 1], 2.999, 0),
        ([1, 1, 1], 3.001, 1)
    ],
    'Sphere': [
        (np.array([0, 0, 0]), 1.8, -1), (np.array([0, 0, 0]), 1.7, 0),
        (np.array([0, 0, -2]), 0.999, +1), (np.array([0, 0, -2]), 1.001, 0),
        (np.array([-2, -2, -2]), 1.7, +1), (np.array([-2, -2, -2]), 1.8, 0),
        (np.array([-2, -2, -2]), 5.1, 0),  (np.array([-2, -2, -2]), 5.2, -1),
        (np.array([-2, 0, -2]), 1.4, +1), (np.array([-2, 0, -2]), 1.5, 0),
        (np.array([-2, 0, -2]), 4.3, 0), (np.array([-2, 0, -2]), 4.4, -1)
    ],
    'Cylinder': [
        ([0, 0, 0], [1, 0, 0], 0.5, 0), ([0, 0, 0], [1, 0, 0], 1.4, 0),
        ([0, 0, 0], [1, 0, 0], 1.5, -1), ([0, 1, 1], [1, 0, 0], 0.001, 0),
        ([0, 1, 1], [1, 0, 0], 2.8, 0), ([0, 1, 1], [1, 0, 0], 2.9, -1),
        ([0, 2, 0], [1, 0, 0], 0.999, +1), ([0, 2, 0], [1, 0, 0], 1.001, 0),
        ([0, 2, 0], [1, 0, 0], 3.1, 0), ([0, 2, 0], [1, 0, 0], 3.2, -1),
        ([0, 0, 0], [0, 1, 0], 0.5, 0), ([0, 0, 0], [0, 1, 0], 1.4, 0),
        ([0, 0, 0], [0, 1, 0], 1.5, -1), ([1, 0, 1], [0, 1, 0], 0.001, 0),
        ([1, 0, 1], [0, 1, 0], 2.8, 0), ([1, 0, 1], [0, 1, 0], 2.9, -1),
        ([2, 0, 0], [0, 1, 0], 0.999, +1), ([2, 0, 0], [0, 1, 0], 1.001, 0),
        ([2, 0, 0], [0, 1, 0], 3.1, 0), ([2, 0, 0], [0, 1, 0], 3.2, -1)
    ],
    'Cone': [
        ([0, 0, 0], [1, 0, 0], 0.5, 0), ([0, 1.4, 0], [1, 0, 0], 0.5, 0),
        ([0, 1.6, 0], [1, 0, 0], 0.5, +1), ([0, -1.4, 0], [1, 0, 0], 0.5, 0),
        ([0, -1.6, 0], [1, 0, 0], 0.5, +1), ([-1, 1.9, 0], [1, 0, 0], 0.5, 0),
        ([1, 2.1, 0], [1, 0, 0], 0.5, +1), ([3.9, 0, 0], [1, 0, 0], 0.5, -1),
        ([-3.9, 0, 0], [1, 0, 0], 0.5, -1), ([0, 0, -3.9], [0, 0, 1], 0.5, -1),
        ([0, 0, 3.9], [0, 0, 1], 0.5, -1), ([0, -3.9, 0], [0, 1, 0], 0.5, -1),
        ([3.8, 0, 0], [1, 0, 0], 0.5, 0),
        ([-3.8, 0, 0], [1, 0, 0], 0.5, 0), ([0, 0, -3.8], [0, 0, 1], 0.5, 0),
        ([0, 0, 3.8], [0, 0, 1], 0.5, 0), ([0, -3.8, 0], [0, 1, 0], 0.5, 0)
    ],
    'Torus': [
        ([0, 0, 0], [1, 0, 0], 1, 0.5, 0.5, 0),
        ([0, 0, 0], [1, 0, 0], 1.91, 0.5, 0.5, 0),
        ([0, 0, 0], [1, 0, 0], 1.92, 0.5, 0.5, +1),
        ([1.4, 0, 0], [1, 0, 0], 1, 0.5, 0.5, 0),
        ([1.6, 0, 0], [1, 0, 0], 1, 0.5, 0.5, +1),
        ([0.5, 3, 0], [1, 0, 0], 1.6, 0.5, 0.5, 0),
        ([0.5, 3, 0], [1, 0, 0], 1.4, 0.5, 0.5, +1),
        ([0, 3, 0], [1, 0, 0], 3, 1.4, 1.4, 0),
        ([0, 3, 0], [1, 0, 0], 3, 1.55, 1.55, -1),
        ([0, 0, 0], [1, 0, 0], 1, 1.4, 1.4, 0),
        ([0, 0, 0], [1, 0, 0], 1, 1.5, 1.5, -1),
        ([0, 0, 0], [1, 0, 0], -1, 1.4, 1.4, 0),
        ([0, 0, 0], [1, 0, 0], -1, 2.6, 2.6, 0),
        ([0, 0, 0], [1, 0, 0], -1, 2.7, 2.7, -1),
        ([0, 0, 0], [1, 0, 0], 1.41, 1.42, 2, -1),
        ([0, 0, 0], [1, 0, 0], 1.41, 1.40, 2, 0),
        ([0, 0, 0], [0, 1, 1], 2.2, 0.5, 0.5, 0),
        ([0, 0, 0], [0, 1, 1], 2.3, 0.5, 0.5, +1),
        ([0, 0, 0], [1, 1, 1], 1, 1.9, 1.9, 0),
        ([0, 0, 0], [1, 1, 1], 1, 2.1, 2.1, -1),
        ([0, 0, 0], [0, 1, 0], 1, 0.5, 0.5, 0),
        ([0, 0, 0], [0, 1, 0], 1.91, 0.5, 0.5, 0),
        ([0, 0, 0], [0, 1, 0], 1.92, 0.5, 0.5, +1),
        ([0, 1.4, 0], [0, 1, 0], 1, 0.5, 0.5, 0),
        ([0, 1.6, 0], [0, 1, 0], 1, 0.5, 0.5, +1),
        ([3, 0.5, 0], [0, 1, 0], 1.6, 0.5, 0.5, 0),
        ([3, 0.5, 0], [0, 1, 0], 1.4, 0.5, 0.5, +1),
        ([3, 0, 0], [0, 1, 0], 3, 1.4, 1.4, 0),
        ([3, 0, 0], [0, 1, 0], 3, 1.55, 1.55, -1),
        ([0, 0, 0], [0, 1, 0], 1, 1.4, 1.4, 0),
        ([0, 0, 0], [0, 1, 0], 1, 1.5, 1.5, -1)
    ],
    'GQuadratic': [
        (np.diag([1, 1, 1]), [0, 0, 0], -1, 0),
        (np.diag([1, 1, 1]), [0, 0, 0], -0.1, 0),
        (np.diag([1, 1, 1]), [0, 0, 0], -3.01, -1),
        (np.diag([1, 1, 1]), -2 * np.array([1, 1, 1]), 3 - 0.1, 0),
        (np.diag([1, 1, 1]), -2 * np.array([2, 2, 2]), 12 - 3.01, 0),
        (np.diag([1, 1, 1]), -2 * np.array([2, 2, 2]), 12 - 2.99, +1),
        (np.diag([1, 1, 1]), -2 * np.array([2, 0, 0]), 4 - 1.01, 0),
        (np.diag([1, 1, 1]), -2 * np.array([2, 0, 0]), 4 - 0.99, +1),
        (np.diag([1, 1, 1]), -2 * np.array([100, 0, 100]), 20000 - 2, +1)
    ]
}
