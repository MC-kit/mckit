from typing import List, Optional
import sys
from pathlib import Path
from build_nlopt import build_nlopt, SYSTEM_WINDOWS
from extension_geometry import geometry_extension
from setuptools import Extension
from setuptools.command.build_ext import build_ext
from setuptools.dist import Distribution

build_nlopt()


class BinaryDistribution(Distribution):
    def is_pure(self):  # noqa
        return False


class MCKitBuilder(build_ext):
    def __init__(self, dist: Distribution, **kwargs) -> None:
        build_ext.__init__(self, dist, **kwargs)
        pass

    def finalize_options(self):
        build_ext.finalize_options(self)
        # Late import to use numpy installed on isolated build
        import numpy as np

        self.include_dirs.append(np.get_include())
        library_dir = Path(sys.prefix) / ("Library/lib" if SYSTEM_WINDOWS else "lib")
        self.library_dirs.append(str(library_dir))

    def build_extension(self, extension: Extension) -> None:
        build_ext.build_extension(self, extension)

        assert extension.name == "mckit.geometry"
        # ext_dir = Path(self.get_ext_fullpath(extension.name)).parent.absolute()
        # .. copy nlopt.dll to mckit source package dir


def build(setup_kwargs):
    """
    Set specific distribution options.

    This function is called with setup.py generated by pip from pyproject.toml.
    """

    ext_modules = [geometry_extension]

    package_data = [
        "data/isotopes.dat",
        "nlopt.dll",
    ]
    # mckit_package_path = Path(__file__).parent / "mckit"
    # for mask in ["*.pyd", "*.so"]:
    #     package_data.extend(map(lambda x: str(x.name), mckit_package_path.glob(mask)))
    print("--- mckit data:", package_data)

    setup_requires = setup_kwargs.get("setup_requires")  # type: Optional[List[str]]
    if setup_requires is None:
        setup_requires = []
    setup_requires.extend(
        [
            "cmake>=3.18.4",
            "numpy>=1.13",
            "mkl-devel",
        ]
    )

    setup_kwargs.update(
        {
            "ext_modules": ext_modules,
            "cmdclass": {"build_ext": MCKitBuilder},
            "package_data": {"mckit": package_data},
            "distclass": BinaryDistribution,
            "long_description": Path("README.rst").read_text(encoding="utf8"),
            "src_root": str(Path(__file__).parent),
            # fix for poetry issue: it doesn't install setup requirements
            "setup_requires": setup_requires,
        }
    )
