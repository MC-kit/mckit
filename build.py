from typing import List, Optional

from pathlib import Path

from extension_builder import MCKitBuilder
from extension_geometry import geometry_extension
from extension_nlopt import NLOptBuildExtension
from setuptools.dist import Distribution


class BinaryDistribution(Distribution):
    def is_pure(self):  # noqa
        return False


def build(setup_kwargs):
    """
    Set specific distribution options.

    This function is called with setup.py generated by pip from pyproject.toml.
    """
    ext_modules = [NLOptBuildExtension(), geometry_extension]

    package_data = ["data/isotopes.dat", "nlopt.dll", ]
    mckit_package_path = Path(__file__).parent / "mckit"
    for mask in ["*.pyd", "*.so"]:
        package_data.extend(map(lambda x: str(x.name), mckit_package_path.glob(mask)))
    print("--- mckit data:", package_data)

    setup_requires = setup_kwargs.get("setup_requires")   # type: Optional[List[str]]
    if setup_requires is None:
        setup_requires = []
    setup_requires.extend([
            "cmake>=3.18.4",
            "numpy>=1.13",
            "mkl-devel",
        ])

    setup_kwargs.update(
        {
            "ext_modules": ext_modules,
            "cmdclass": {"build_ext": MCKitBuilder},
            "package_data": {"mckit": package_data},
            "distclass": BinaryDistribution,
            "long_description": Path("README.rst").read_text(encoding="utf8"),
            # fix for poetry issue: it doesn't install setup requirements
            "setup_requires": setup_requires
        }
    )
